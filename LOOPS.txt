------------------------------------------ LOOPS -----------------------------------------------------------------------------------

Loop statements run the same statements with a series of different values. The loop statements are:
• Basic LOOP
• FOR LOOP
• Cursor FOR LOOP
• WHILE LOOP
The statements that exit a loop are:
• EXIT
• EXIT WHEN
The statements that exit the current iteration of a loop are:
• CONTINUE
• CONTINUE WHEN


			Understanding LOOPS

In PL/SQL  we use select statements which returns single row, For more than one row requirement we use cursors for data set retrieval. 

cursor fetched records and pointer comes to body for iteration. 

What is iteration? It is simple cursor has 10 rows in program body we define loop to iterate means go to 1 record than second and so on until loop exit. To go
on records one by one until exit cycle is iteration.

Key Points:-
During iteration in loop we will perform several operations like DML, compute etc on every record or not depends on operation we set.
LOOP can be used without cursors as well just for understanding cursor examle used.

--------------------------------------Basic LOOP Statement -------------------------------------------------------------------------------
LOOP
statements
END LOOP;

With each iteration of the loop, the statements run and control returns to the top of the loop. To prevent an infinite loop, a statement or raised exception 
must exit the loop.

------------Below is an example of simple loop with EXIT condition

DECLARE
x NUMBER := 0;
BEGIN
LOOP
DBMS_OUTPUT.PUT_LINE ('Inside loop: x = ' || TO_CHAR(x));
x := x + 1;
IF x > 3 THEN
EXIT;
END IF;
END LOOP;
-- After EXIT, control resumes here
DBMS_OUTPUT.PUT_LINE(' After loop: x = ' || TO_CHAR(x));
END;

--------------------------------Basic loop without EXIT statement ---------------------------------------

DECLARE
i NUMBER := 0;
BEGIN
for i in 1..10 LOOP
DBMS_OUTPUT.PUT_LINE(i);
END LOOP;
END;


----------------------- Nested Basic LOOP with EXIT statement--------------------------------------------------------
DECLARE
s PLS_INTEGER := 0;
i PLS_INTEGER := 0;
j PLS_INTEGER;
BEGIN
<<outer_loop>>
LOOP
i := i + 1;
j := 0;
<<inner_loop>>
LOOP
j := j + 1;
s := s + i * j; -- Sum several products
EXIT inner_loop WHEN (j > 5);
EXIT outer_loop WHEN ((i * j) > 15);
END LOOP inner_loop;
END LOOP outer_loop;
DBMS_OUTPUT.PUT_LINE
('The sum of products equals: ' || TO_CHAR(s));
END;

--------------------------------------------------FOR LOOP Statements ------------------------------------------------------------------
BEGIN
DBMS_OUTPUT.PUT_LINE ('lower_bound < upper_bound');
FOR i IN 1..3 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
DBMS_OUTPUT.PUT_LINE ('lower_bound = upper_bound');
FOR i IN 2..2 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
DBMS_OUTPUT.PUT_LINE ('lower_bound > upper_bound');
FOR i IN 3..1 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
END;


--------------------------------------------------------Reverse FOR LOOP Statements
BEGIN
DBMS_OUTPUT.PUT_LINE ('upper_bound > lower_bound');
FOR i IN REVERSE 1..3 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
DBMS_OUTPUT.PUT_LINE ('upper_bound = lower_bound');
FOR i IN REVERSE 2..2 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
DBMS_OUTPUT.PUT_LINE ('upper_bound < lower_bound');
FOR i IN REVERSE 3..1 LOOP
DBMS_OUTPUT.PUT_LINE (i);
END LOOP;
END;


---------------------------------Simulating STEP Clause in FOR LOOP Statement
DECLARE
step PLS_INTEGER := 5;
BEGIN
FOR i IN 1..3 LOOP
DBMS_OUTPUT.PUT_LINE (i*step);
END LOOP;
END;

----------------------------------- Nested FOR LOOP Statements with Same Index Name
BEGIN
<<outer_loop>>
FOR i IN 1..3 LOOP
<<inner_loop>>
FOR i IN 1..3 LOOP
IF outer_loop.i = 2 THEN
DBMS_OUTPUT.PUT_LINE
('outer: ' || TO_CHAR(outer_loop.i) || ' inner: '
|| TO_CHAR(inner_loop.i));
END IF;
END LOOP inner_loop;
END LOOP outer_loop;
END;

--------------------------------------Using Simple for LOOP ------------------------------------------
DECLARE
p NUMBER := 0;
BEGIN
FOR k IN 1..500 LOOP -- calculate pi with 500 terms
p := p + ( ( (-1) ** (k + 1) ) / ((2 * k) - 1) );
END LOOP;
p := 4 * p;
DBMS_OUTPUT.PUT_LINE( 'pi is approximately : ' || p ); -- print result
END;




------------------------------------------------------While Loop -------------------------------------------------


The WHILE LOOP statement runs one or more statements while a condition is true. It has
this structure:
WHILE condition LOOP
statements
END LOOP [ label ];

Example

DECLARE
done BOOLEAN := FALSE;
BEGIN
WHILE done LOOP
DBMS_OUTPUT.PUT_LINE ('This line does not print.');
done := TRUE; -- This assignment is not made.
END LOOP;
WHILE NOT done LOOP
DBMS_OUTPUT.PUT_LINE ('Hello, world!');
done := TRUE;
END LOOP;
END;





How loops can be utlized in programming we will discuss in details on topics procedure, function and packages